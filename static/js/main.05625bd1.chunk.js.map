{"version":3,"sources":["ConfigTabs/Config/index.js","ConfigTabs/Result/index.js","ConfigTabs/index.js","App.js","serviceWorker.js","index.js"],"names":["Config","state","input","_this2","this","react_default","a","createElement","className","TextField","value","onChange","e","setState","target","multiline","variant","label","classes","root","rows","Button","onClick","props","saveObjAndChangeTab","Component","Result","type","item","fieldType","name","key","_this","obj","map","field","formButtons","headerLabel","onSubmit","Object","keys","config","ConfigTabs","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","jsonConfig","bind","assertThisInitialized","objAsStaring","jsonString","replace","g","concat","JSON","parse","_this$state","Tabs","newValue","component","Tab","ConfigTabs_Config","ConfigTabs_Result","App","src_ConfigTabs","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05625bd1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nimport { TextField, Button } from \"@material-ui/core\";\n\nimport './style.css';\n\nclass Config extends Component {\n  static propTypes = {\n    saveObjAndChangeTab: PropTypes.func,\n  };\n\n  state = {\n    input: '{}',\n  };\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <div className=\"configWrap\">\n        <TextField\n          value={input}\n          onChange={(e) => this.setState({ input: e.target.value })}\n          multiline\n          variant=\"outlined\"\n          label=\"Input for your object\"\n          classes={{ root: \"textField\" }}\n          rows=\"30\"\n        />\n        <div className=\"buttonWrap\">\n          <Button\n            variant=\"contained\"\n            onClick={() => this.props.saveObjAndChangeTab(input)}\n          >Apply</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React, { Component } from 'react'\nimport PropTypes from \"prop-types\";\n\nimport './style.css';\n\nclass Result extends Component {\n  static propTypes = {\n    obj: PropTypes.object,\n  };\n\n  formButtons(value) {\n    return <input type=\"submit\" value={value} className=\"submit\"/>\n  }\n\n  field(item) {\n    const type = item.type;\n    const { label } = item;\n\n    let fieldType = '';\n\n    switch (type) {\n      case 'numberfield':\n        fieldType = 'number';\n        break;\n      case 'textarea':\n        return (\n          <div className=\"wrapField\">\n            <div className=\"label\">\n              <span className=\"label\">{label}</span>\n            </div>\n            <textarea/>\n          </div>\n        );\n      case 'textfield':\n        fieldType = 'text';\n        break;\n      case 'checkbox':\n        fieldType = 'checkbox';\n        break;\n      case 'datefield':\n        fieldType = 'date';\n        break;\n      case 'radioButtons':\n        fieldType = 'radio';\n        break;\n      default:\n        return null;\n    }\n\n    return (\n      <div className=\"wrapField\">\n        <div className=\"label\">\n          <span>{label}</span>\n        </div>\n        <input type={fieldType} name=\"radio\"/>\n      </div>\n    );\n  }\n\n  config(key) {\n    const { obj } = this.props;\n\n    switch (key) {\n      case 'items':\n        return obj[key].map((item) => this.field(item));\n      case 'buttons':\n        return obj[key].map((value) => this.formButtons(value));\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { obj } = this.props;\n\n    const headerLabel = obj.headerLabel || 'Default form';\n\n    return (\n      <div className=\"resultWrap\">\n        <fieldset>\n          <legend>{headerLabel}</legend>\n          <form onSubmit={() => null}>\n            {Object.keys(obj).map((key) => this.config(key))}\n          </form>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport { Tabs, Tab } from '@material-ui/core';\n\nimport Config from './Config';\nimport Result from './Result';\n\nimport './style.css';\n\nclass ConfigTabs extends Component {\n  state = {\n    value: 0,\n    jsonConfig: {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.saveObjAndChangeTab = this.saveObjAndChangeTab.bind(this);\n  }\n\n  saveObjAndChangeTab(objAsStaring) {\n    const jsonString = objAsStaring\n      .replace(/'/g, '')\n      .replace(/(\\w+\\s*\\w+)/g, (g) => `\"${g}\"`);\n\n    const jsonConfig = JSON.parse(jsonString);\n\n    this.setState({ value: 1, jsonConfig });\n  }\n\n  render() {\n    const { value, jsonConfig } = this.state;\n\n    return (\n      <div>\n        <div className=\"wrapTabHeader\">\n          <Tabs value={value} onChange={(e, newValue) => this.setState({ value: newValue })} component=\"div\">\n            <Tab label=\"Config\"/>\n            <Tab label=\"Result\"/>\n          </Tabs>\n        </div>\n        <div>\n          {value === 0 && <Config saveObjAndChangeTab={this.saveObjAndChangeTab}/>}\n          {value === 1 && <Result obj={jsonConfig}/>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ConfigTabs;\n","import React from 'react';\nimport ConfigTabs from \"./ConfigTabs\";\n\nimport './App.css';\n\nfunction App() {\n  return <ConfigTabs/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}